using System;
using System.Diagnostics;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Downloader
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            cmbFormat.Items.AddRange(new string[] { "mp4", "mp3", "wav" });
            cmbFormat.SelectedIndex = 0;
            label4.Text = Application.StartupPath;
        }

        private async void ytbtn_Click(object sender, EventArgs e)
        {
            await Downloader_UB(txtURL.Text, cmbFormat.SelectedItem.ToString());
        }

        public async Task Downloader_UB(string text_url, string format)
        {
            if (string.IsNullOrEmpty(text_url))
            {
                MessageBox.Show("Please enter a video URL.");
                return;
            }

            using (FolderBrowserDialog folderDialog = new FolderBrowserDialog())
            {
                folderDialog.Description = "Select folder to save the file";
                if (folderDialog.ShowDialog() != DialogResult.OK) return;

                string selectedFolder = folderDialog.SelectedPath;
                string ytDlpPath = @"D:\Downloader\Downloader\yt-dlp.exe";
                string ffmpegPath = @"D:\Downloader\Downloader\ffmpeg-master-latest-win64-gpl-shared\bin\ffmpeg.exe";
                string ffmpegDir = Path.GetDirectoryName(ffmpegPath);
                string cookiesPath = Path.Combine(Application.StartupPath, "cookies.txt");

                int i = 1;
                string extPattern = "%(ext)s";
                string finalFileName;
                string output_video;

                do
                {
                    finalFileName = $"Downloaded_VIDEO_UB{i}.{extPattern}";
                    output_video = Path.Combine(selectedFolder, finalFileName);
                    i++;
                } while (File.Exists(output_video.Replace(extPattern, format)));

                string args = $"--cookies \"{cookiesPath}\" \"{text_url}\" -o \"{output_video}\"";

                if (format == "mp3" || format == "wav")
                {
                    args += $" --extract-audio --audio-format {format}";
                }
                else
                {
                    args += $" -f bestvideo[height=2160]+bestaudio/bestvideo+bestaudio --merge-output-format mp4";
                }

                ProcessStartInfo processStartInfo = new ProcessStartInfo
                {
                    FileName = ytDlpPath,
                    Arguments = args,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    CreateNoWindow = true
                };

                processStartInfo.EnvironmentVariables["PATH"] = ffmpegDir + ";" + Environment.GetEnvironmentVariable("PATH");

                try
                {
                    label2.Text = "Downloading... Please wait.";
                    ProgressBar1.Value = 0;
                    label3.Text = "0%";

                    var process = new Process { StartInfo = processStartInfo };
                    process.OutputDataReceived += (s, e) => ParseProgress(e.Data);
                    process.ErrorDataReceived += (s, e) => ParseProgress(e.Data);

                    process.Start();
                    process.BeginOutputReadLine();
                    process.BeginErrorReadLine();
                    await Task.Run(() => process.WaitForExit());

                    label2.Text = "Download Complete!";
                    label3.Text = "100%";
                    ProgressBar1.Value = 100;

                    string ext = (format == "mp3" || format == "wav") ? format : "mp4";
                    string filePath = output_video.Replace(extPattern, ext);

                    if (File.Exists(filePath))
                    {
                        Process.Start(new ProcessStartInfo()
                        {
                            FileName = filePath,
                            UseShellExecute = true
                        });
                    }
                    else
                    {
                        MessageBox.Show("Download finished, but file not found: " + filePath);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("yt-dlp failed: " + ex.Message);
                }
            }
        }

        private void ParseProgress(string data)
        {
            if (string.IsNullOrEmpty(data)) return;

            Match match = Regex.Match(data, @"\b(\d{1,3}\.\d)%");

            if (match.Success && double.TryParse(match.Groups[1].Value, out var percent))
            {
                int p = (int)Math.Round(percent);
                ProgressBar1.Invoke((MethodInvoker)(() => ProgressBar1.Value = p));
                label3.Invoke((MethodInvoker)(() => label3.Text = p + "%"));
            }
        }

        
        private void guna2ComboBox1_SelectedIndexChanged(object sender, EventArgs e) { }
        private void guna2GradientButton1_Click(object sender, EventArgs e) { }
        private void Form1_Load(object sender, EventArgs e) { }
        private void guna2PictureBox1_Click(object sender, EventArgs e) { }
        private void dwnBgMusic_Click(object sender, EventArgs e) { }
        private void DwnVoice_Click(object sender, EventArgs e) { }
        private void guna2GradientButton1_Click_1(object sender, EventArgs e) { }
        private void Form1_Load_1(object sender, EventArgs e) { }
    }
}
